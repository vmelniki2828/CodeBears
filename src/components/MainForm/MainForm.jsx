import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import {
  FormContainer,
  FormTitle,
  FormWrap,
  FormWrapText,
  Form,
  FormText,
  FormText2,
  FormPar,
  Con,
  InputLine,
  TextArea,
  ButtonGroup,
  AttachButton,
  SendButton,
  Attach,
} from './MainForm.styled';
import AttachIcon from '../../image/Vector66.svg';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ScrollTrigger
gsap.registerPlugin(ScrollTrigger);

const MainForm = () => {
  useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è FormTitle (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É)
    gsap.fromTo(
      '.form-title',
      { y: -100, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 2,
        scrollTrigger: {
          trigger: '.form-title',
          start: 'top 50%',
          toggleActions: 'play none none none',
        }
      }
    );

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    gsap.fromTo(
      '.form-text',
      { x: -200, opacity: 0 },
      {
        x: 0,
        opacity: 1,
        duration: 1,
        scrollTrigger: {
          trigger: '.form-text',
          start: 'top 80%',
          toggleActions: 'play none none none',
        }
      }
    );

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
    gsap.fromTo(
      '.form',
      { x: 200, opacity: 0 },
      {
        x: 0,
        opacity: 1,
        duration: 1,
        scrollTrigger: {
          trigger: '.form',
          start: 'top 80%',
          toggleActions: 'play none none none',
        }
      }
    );
  }, []);
  const [formData, setFormData] = useState({
    name: '',
    contact: '',
  });

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:5000/send', formData);
      alert("–î—è–∫—É—é—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É! –°–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤`—è–∂—É—Ç—å—Å—è –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏!");
    } catch (error) {
      console.log(error);
      alert('–£–ø—Å! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! üò¢');
    }

    setFormData({
      name: '',
      contact: '',
    });
  };
  return (
    <FormContainer id='contact'>
      <FormTitle className="form-title">
        –î–ê–í–ê–ô–¢–ï <br /> –°–¢–í–û–†–ò–ú–û <br />
        –©–û–°–¨ –ü–†–ï–ö–†–ê–°–ù–ï.
      </FormTitle>
      <FormWrap>
        <FormWrapText className="form-text">
          <FormText>
            –í–°–ï –ó –ß–û–ì–û–°–¨ –ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø <br />
          </FormText>
          <FormText2>
            –ó–∞–ª–∏—à—Ç–µ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –ø—Ä–æ–µ–∫—Ç—É —É —Ñ–æ—Ä–º—ñ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ
            –∑–≤‚Äô—è–∑–∫—É
          </FormText2>
          <FormPar>
            –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ–ø—Ä–∞—Ü—é—î –∑–∞–ø–∏—Ç, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ
            –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è. –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —É –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            —á–µ—Ä–µ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤‚Äô—è–∑–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∞–±–æ –ø–æ–¥–∞–ª—å—à–æ—ó
            —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ.
          </FormPar>
        </FormWrapText>
        <Form className="form" onSubmit={handleSubmit}>
          <Con>
            <InputLine type="text" name="name" value={formData.name} onChange={handleChange} />
            <InputLine type="text" name="contact" value={formData.contact} onChange={handleChange} />
            <TextArea type="text" />
          </Con>
          <ButtonGroup>
            <AttachButton><Attach alt='AttachIcon' src={AttachIcon} /></AttachButton>
            <SendButton type="submit">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</SendButton>
          </ButtonGroup>
        </Form>
      </FormWrap>
    </FormContainer>
  );
};

export default MainForm;
